1. 添加错误处理
为避免因文件路径错误或文件损坏导致程序崩溃，可以在打开和保存工作簿时加入异常处理。

python
Copy code
try:
    workbook = load_workbook(template_path)
except FileNotFoundError:
    logging.error(f"Template file {template_path} not found!")
    return
except Exception as e:
    logging.error(f"Error loading workbook: {e}")
    return

# 在保存文件时处理可能的错误
try:
    workbook.save(output_path)
    logging.info(f"All grades saved to {output_path} successfully!")
except Exception as e:
    logging.error(f"Failed to save workbook: {e}")
2. 支持动态配置文件
将 course_mapping 从硬编码中分离，改为从外部 JSON 文件加载，方便后续扩展。

代码修改：
添加 JSON 文件读取功能：
python
Copy code
import json

def load_course_mapping(config_path="course_mapping.json"):
    try:
        with open(config_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        logging.error(f"Course mapping config file {config_path} not found!")
        return {}
    except json.JSONDecodeError as e:
        logging.error(f"Error parsing config file: {e}")
        return {}
替换 course_mapping 定义：
python
Copy code
course_mapping = load_course_mapping()
JSON 文件结构示例：
json
Copy code
{
    "OPS": {
        "columns": {
            "Lab": "O",
            "Quiz": "J",
            "Midterm": "C",
            "Final": "C"
        },
        "rows": {
            "lab_start_row": 63,
            "quiz_start_row": 63,
            "midterm_row": 66,
            "final_row": 67
        }
    },
    "CPR": {
        "columns": {
            "Activity": "J",
            "Quiz": "O",
            "ICT": "D",
            "Final": "D"
        },
        "rows": {
            "activity_start_row": 27,
            "quiz_start_row": 27,
            "ict_row": 30,
            "final_row": 31
        }
    }
}
3. 添加数据验证
在填充 Excel 前检查数据格式是否正确，避免写入错误。

数据验证函数：
python
Copy code
def validate_data(data):
    if not isinstance(data, list):
        logging.error("Data must be a list of tuples!")
        return False
    for item in data:
        if not (isinstance(item, tuple) and len(item) == 2 and isinstance(item[0], str) and isinstance(item[1], (int, float))):
            logging.error(f"Invalid data format: {item}")
            return False
    return True
调用验证：
python
Copy code
if not validate_data(data1):
    return
if not validate_data(data2):
    return
4. 支持更多的课程
通过动态传入课程名、数据文件路径等参数，支持灵活配置。

修改 main 函数：
python
Copy code
def main(course_name, data, template_path="SEMESTER 1 MARKINGS.xlsx", output_path="Updated_Markings.xlsx"):
    try:
        workbook = load_workbook(template_path)
    except FileNotFoundError:
        logging.error(f"Template file {template_path} not found!")
        return

    save_to_excel(workbook, data, course_name)

    try:
        workbook.save(output_path)
        logging.info(f"All grades saved to {output_path} successfully!")
    except Exception as e:
        logging.error(f"Failed to save workbook: {e}")
示例调用：
python
Copy code
if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    
    ops_data = [("Lab #1", 0.3333), ("Quiz 1", 0.8)]
    cpr_data = [("Activity 01", 0.9), ("Quiz 01", 0.8)]
    
    main("OPS", ops_data)
    main("CPR", cpr_data)