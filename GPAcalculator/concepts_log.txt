2024/12/6----------------------------
# requests
- 功能：简化 HTTP 请求，发送各种请求，获取网页或 API 数据。
- 安装命令：pip install requests
- 示例代码：
  import requests
  response = requests.get('https://www.example.com')
  print(response.text)

# beautifulsoup4
- 功能：解析 HTML 和 XML，常与 requests 配合使用，提取网页数据。
- 安装命令：pip install beautifulsoup4
- 示例代码：
  from bs4 import BeautifulSoup
  import requests
  response = requests.get('https://www.example.com')
  soup = BeautifulSoup(response.text, 'html.parser')
  title = soup.title.string
  print(title)

# openpyxl
- 功能：读取和写入 Excel 文件（.xlsx 格式），适用于数据分析和报表生成。
- 安装命令：pip install openpyxl
- 示例代码：
  from openpyxl import Workbook
  wb = Workbook()
  sheet = wb.active
  sheet['A1'] = 'Hello, world!'
  wb.save('example.xlsx')

# pandas
- 功能：强大的数据分析库，处理表格数据、CSV、Excel 文件等，提供数据清理、分析和可视化功能。
- 安装命令：pip install pandas
- 示例代码：
  import pandas as pd
  data = pd.read_csv('example.csv')
  print(data.head())

2024/12/7----------------------------------
# Selenium 
|是一种工具，用来模拟浏览器操作，就像你手动操作浏览器一样。
|可以通过它自动化地加载网页，模拟点击、输入，以及抓取动态加载的内容。
|测试目的
|验证网站是否能够通过模拟浏览器加载页面抓取数据。
|检查成绩信息是否在页面完全加载后可见或可以通过某种 API 获取
|# WebSocket in Selenium
|- WebSocket enables real-time two-way communication between Selenium WebDriver and Chrome.
|- When `webdriver.Chrome()` is called, WebSocket is established for browser control.
|- `DevTools listening on ws://...` indicates the connection is active.
|# ChromeDriver and Selenium
|- Selenium uses ChromeDriver to control Chrome.
|- `webdriver.Chrome()` launches both ChromeDriver and the browser.
|# Opening Pages
|- Use `driver.get("url")` to load a page via WebSocket.


# Seneca成绩API
1. **身份验证**  
   - 需要正确配置认证信息（如Cookie、Authorization）。
2. **请求头配置**  
   - 请求头需与浏览器一致，包括`User-Agent`等。
3. **403权限问题**  
   - 可能因权限或API访问控制导致403错误。
4. **动态内容加载**  
   - 使用AJAX动态加载数据，需模拟浏览器行为。
5. **Session管理**  
   - 必须保持有效Session ID和Cookie。
6. **反爬虫机制**  
   - 网站可能有反爬虫措施，需要避开或使用Selenium模拟浏览器。

2024/12/8-------------.py多行注释错误转义-----------------
# JSON格式
# JSON Format Overview
- JSON (JavaScript Object Notation): Lightweight data-interchange format.
- Structure: Key-value pairs and arrays.
- Syntax:
  * Objects: Enclosed in `{}` with key-value pairs.
  * Arrays: Enclosed in `[]` with values separated by commas.
  * Keys: Strings, enclosed in double quotes.
  * Values: Strings, numbers, objects, arrays, `true`, `false`, or `null`.
# Example
{
  "name": "John",
  "age": 30,
  "isStudent": false,
  "skills": ["Python", "C"],
  "address": { "city": "Toronto", "postalCode": "M1B1A1" }
}

#python脚本优化
driver_path = r"C:\Users\Lenovo\.wdm\..."
chrome_service = Service(driver_path)
driver = webdriver.Chrome(service=chrome_service)
↓↓↓等效↓↓↓
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))

#python注释要求
多行注释与反斜杠：
   - 多行注释使用三引号 ''' 或 """ 包围，实际上是多行字符串。
   - 在这种情况下，反斜杠 \ 的处理方式与普通字符串相同。如果反斜杠后跟着一个无效的 Unicode 转义序列，就会引发 Unicode 错误。
错误的示例：如果反斜杠后跟着未正确转义的字符，例如 \U，则会引发错误
   '''
   这是一个多行注释
   包含了一个无效的 Unicode 转义序列 \U0001F600
   '''
避免错误的方法：使用原始字符串：通过在多行注释前加 r，让 Python 不处理反斜杠的转义 or 使用双反斜杠 \\ 来避免转义错误
   r'''
   这是一个原始多行字符串注释
   包含了一个无效的 Unicode 转义序列 \U0001F600
   '''

2024/12/10---------------------------------------
# CSS（Cascading Style Sheets）简介

- **定义**：CSS用于控制HTML文档的布局、颜色、字体和其他样式，帮助实现网页的美观和结构化。
- **层叠性（Cascading）**：多个样式规则可应用于同一元素，浏览器按优先级和顺序决定最终样式。
- **选择器**：用于选择要应用样式的HTML元素。常见选择器包括：
  - **元素选择器**：直接选择HTML标签（如`div`、`p`）。例如，`div { color: red; }` 会使页面中所有`div`标签的文字颜色变为红色。
  - **类选择器**：选择具有特定类的元素（如`.class-name`）。例如，`.header { font-size: 20px; }` 会使所有`class="header"`的元素字体大小为20px。
  - **ID选择器**：选择具有特定ID的元素（如`#id-name`）。例如，`#main { margin: 10px; }` 会为`id="main"`的元素设置外边距为10px。
  - **组合选择器**：结合多个选择器，精确定位元素（如`div.class-name`）。例如，`div.class-name { background-color: blue; }` 会使所有`div`标签且具有`class="class-name"`的元素背景变为蓝色。

- **盒模型**：CSS布局的基本概念，描述了元素的外边距（margin）、边框（border）、内边距（padding）和内容（content）。
  - **例子**：`div { margin: 10px; padding: 15px; border: 1px solid black; }` 定义了一个`div`元素的外边距、内边距和边框。
  
- **响应式设计**：CSS媒体查询帮助网页适应不同设备和屏幕尺寸。
  - **例子**：`@media (max-width: 600px) { body { font-size: 12px; } }` 会在屏幕宽度小于600px时调整字体大小为12px。

- **常见HTML元素和属性**：
  - **文本元素**：`<h1>`, `<p>`, `<span>`, `<strong>`, `<em>` 等，分别用于标题、段落、内联文本加粗或斜体。
  - **布局元素**：`<div>`, `<section>`, `<header>`, `<footer>`, `<article>` 等，帮助组织和布局页面内容。
  - **表单元素**：`<input>`, `<button>`, `<select>`, `<textarea>` 等，创建可交互的表单控件。
  - **链接元素**：`<a>`，用于创建超链接。
  - **图片元素**：`<img>`，用于嵌入图像。
  
- **定位和浮动**：
  - **定位**：`position` 属性帮助元素定位，如 `position: absolute;` 或 `position: relative;`。
  - **浮动**：`float` 属性用于让元素浮动，例如 `float: left;` 将元素向左浮动。

- **过渡和动画**：
  - **过渡**：`transition` 用于在状态变化时平滑过渡。例如，`transition: all 0.3s ease;` 使元素的所有属性在0.3秒内过渡。
  - **动画**：`@keyframes` 用于创建复杂的动画效果。

2024/12/11-----------------重复元素id导致error------------------
# Selenium Wait Types: 
time.sleep(), driver.implicitly_wait(), WebDriverWait
## 1. time.sleep() pauses execution for a fixed time, inefficient as it always waits the full duration. Example:
import time
time.sleep(5)
## 2. driver.implicitly_wait() sets a global wait time for element searches, stops early if the element is found. Example:
driver.implicitly_wait(10)
element = driver.find_element(By.ID, "some_id")
## 3. WebDriverWait (Explicit Wait) waits for a specific condition, customizable and efficient for dynamic elements. Example:
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
wait = WebDriverWait(driver, 10)
element = wait.until(EC.presence_of_element_located((By.ID, "some_id")))
## Comparison:
- **time.sleep()**: Fixed wait, entire script, low efficiency.
- **implicitly_wait()**: Global implicit wait, all searches, medium efficiency.
- **WebDriverWait**: Conditional explicit wait, specific actions, high efficiency.

# Selenium元素查找中的错误和解决方法
- **重复ID**  
  HTML标准要求ID应该是唯一的，但如果多个元素共享相同的ID，Selenium会选择第一个遇到的元素，这可能导致测试失败或选择错误的元素。  
  **解决方法**：确保ID唯一或使用XPath或CSS选择器进行更精确的定位。
- **动态变化的属性**  
  元素的属性可能在页面加载后被动态改变，Selenium会无法找到或操作这些元素，通常会抛出`NoSuchElementException`或`StaleElementReferenceException`。  
  **解决方法**：使用显式等待（WebDriverWait）等待元素可用，或使用更稳定的选择器如XPath或CSS选择器。
- **使用XPath和CSS选择器组合多个属性**  
  可以同时使用多个属性（如ID和type）来精确定位元素，避免因为属性不唯一或动态变化导致的问题。  
  示例XPath：  
  `driver.find_element(By.XPATH, "//button[@id='0008' and @type='submit']")`  
  示例CSS选择器：  
  `driver.find_element(By.CSS_SELECTOR, "button#0008[type='submit']")`  

2024/12/13---------------1.元素stale循环赋值 2.devTool点击对象高亮-----------
1. 需要sleep等待新分页元素加载再赋值
2. analytics-id？？？
3.# Pseudo-elements in CSS
## Definition
- Pseudo-elements are special CSS selectors.
- They allow adding styles or effects to existing elements without modifying HTML structure.
	## Common Pseudo-elements
### ::before
- Inserts content before the selected element.
- Example:
```css
p::before {
    content: "⭐"; /* Star symbol */
    color: gold;
}
```
### ::after
- Inserts content after the selected element.
- Example:
```css
p::after {
    content: "✓"; /* Check mark */
    color: green;
}
```
### ::first-line
- Targets the first line of text within an element.
- Example:
```css
p::first-line {
    font-weight: bold;
    color: blue;
}
```
### ::first-letter
- Targets the first letter of an element's text.
- Example:
```css
p::first-letter {
    font-size: 2em;
    color: red;
}
```
	## Example Usage
### HTML:
```html
<p>Hello, world!</p>
```
### CSS:
```css
p::before {
    content: "⭐"; /* Star symbol */
    color: gold;
}

p::after {
    content: "✓"; /* Check mark */
    color: green;
}
```
### Result:
```html
⭐Hello, world!✓
```
	## Summary
- Pseudo-elements enhance visual effects without altering HTML.
- Useful in web design for improving user experience and styling flexibility.

2024/12/16-------------------------
我都已经加了显式等待了怎么有时还会stale或者等待时间不充分的问题
你说得对，你的代码确实已经包含了显式等待的逻辑。不过，即使有显式等待，有时还是会遇到 StaleElementReferenceException 或等待时间不充分的问题。这通常是由于动态网页的特性造成的。以下是一些可能的原因和解决方法：

可能原因
元素在等待期间被重新加载或更新：网页在等待期间可能重新加载某些元素，导致元素引用失效。

复杂的DOM操作：页面可能在加载过程中进行了多次复杂的DOM操作，导致元素状态不稳定。

JavaScript 动态内容：一些内容由JavaScript动态更新，可能在你操作之前被改变。

解决方法
重试机制： 实现一个重试机制，在 StaleElementReferenceException 发生时多次尝试执行操作。

增加等待时间： 在一些关键步骤前后增加等待时间，确保页面完全加载。

重新定位元素： 在操作前重新定位元素，确保获取到最新的元素引用。


